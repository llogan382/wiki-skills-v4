generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interests {
  id    Int    @id @default(autoincrement())
  title String @unique @db.VarChar(255)
  User  User[] @relation("InterestsToUser")
}

model Profile {
  id         Int       @id @default(autoincrement())
  bio        String?
  avatar     String?
  experience DateTime?
  profileId  User      @relation(fields: [userId], references: [id])
  userId     String    @unique
  location   Location?
}

model User {
  id            String      @id @default(cuid())
  email         String?     @unique
  name          String?
  payments      String[]
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  Post          Post[]
  profileId     Int?
  profile       Profile?
  sessions      Session[]
  interests     Interests[] @relation("InterestsToUser")
}

model Location {
  id        Int     @id @default(autoincrement())
  street1   String
  street2   String?
  city      String
  State     String
  zipcode   Int
  current   Boolean
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int     @unique
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
}
