generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      =  process.env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Interests {
  id      Int                @id @default(autoincrement())
  title   String             @unique @db.VarChar(255)
  users   UsersOnInterests[]
  created DateTime?          @default(now())
}

model UsersOnInterests {
  interest          Interests @relation(fields: [interestId], references: [id])
  interestId        Int
  user              User      @relation(fields: [userId], references: [id])
  userId            Int
  experience        DateTime
  experienceDetails String?

  @@id([interestId, userId])
}

model User {
  id                          Int                @id @default(autoincrement())
  email                       String?            @unique
  name                        String?
  bio                         String?
  payments                    String[]
  street1                     String?
  street2                     String?
  city                        String?
  State                       String?
  zipcode                     Int?
  emailVerified               DateTime?
  image                       String?
  accounts                    Account[]
  Post                        Post[]
  profileId                   Int?               @default(autoincrement())
  sessions                    Session[]
  interests                   UsersOnInterests[]
  contact                     UserContact?       @relation(fields: [userContactUserIdForContact], references: [userIdForContact])
  userContactUserIdForContact Int?
}

model UserContact {
  userIdForContact Int     @id
  phone            String?
  faceTime         String?
  email            String?
  textMessage             String?
  linkedIn         String?
  facebook         String?
  twitter          String?
  instagram        String?
  tikTok           String?
  youtube          String?
  User             User[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
}
